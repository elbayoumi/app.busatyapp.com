<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Auto Send Location - Socket.IO Test with Moving Bus</title>

  <!-- Load Socket.IO client library -->
  <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>

  <!-- Load Bootstrap for styling -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha2/dist/css/bootstrap.min.css" rel="stylesheet">

  <!-- Load Leaflet.js for maps -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>

  <style>
    #map {
      height: 400px;
      border-radius: 10px;
      margin-top: 20px;
    }
  </style>

</head>

<body class="bg-light">

<div class="container p-5">
  <h2 class="text-center mb-4">🚀 Auto Location Sender with Moving Bus</h2>

  <div class="mb-3">
    <button class="btn btn-success" onclick="startSending()">Start Sending</button>
    <button class="btn btn-danger" onclick="stopSending()">Stop Sending</button>
  </div>

  <div id="status" class="alert alert-warning">🔵 Waiting for connection...</div>

  <div class="card mt-4">
    <div class="card-body">
      <h5>Last Sent Message:</h5>
      <pre id="lastMessage">{}</pre>
    </div>
  </div>

  <div id="map"></div>

</div>

<script>
  // Connect to the socket server
  const socket = io('https://node.busatyapp.com/', {
    query: {
      token: '71e456b873f87f214f139799878b911a'
    },
    transports: ['websocket']
  });

  const fixedTripId = 37;
  const fixedBusId = 6;
  let intervalId = null;
  let pathCoordinates = [];

  // Start position
  let currentLatitude = 30.0444;
  let currentLongitude = 31.2357;

  // Movement step
  const stepLat = 0.0002;
  const stepLng = 0.0001;

  const map = L.map('map').setView([currentLatitude, currentLongitude], 15);

  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: 'Map data © OpenStreetMap contributors'
  }).addTo(map);

  // Bus marker with custom icon
  const busIcon = L.icon({
    iconUrl: 'https://cdn-icons-png.flaticon.com/512/61/61168.png', // Bus icon
    iconSize: [30, 30], 
    iconAnchor: [15, 15], 
  });

  let busMarker = L.marker([currentLatitude, currentLongitude], { icon: busIcon }).addTo(map);
  let polyline = L.polyline([], { color: 'blue' }).addTo(map);

  socket.on('connect', () => {
    document.getElementById('status').className = 'alert alert-success';
    document.getElementById('status').innerText = '✅ Connected to socket server!';
  });

  socket.on('disconnect', () => {
    document.getElementById('status').className = 'alert alert-danger';
    document.getElementById('status').innerText = '❌ Disconnected from server!';
  });

  function startSending() {
    if (!intervalId) {
      document.getElementById('status').className = 'alert alert-primary';
      document.getElementById('status').innerText = '🚀 Sending locations every 5 seconds...';
      intervalId = setInterval(() => {
        sendTestMessage();
      }, 5000);
    }
  }

  function stopSending() {
    if (intervalId) {
      clearInterval(intervalId);
      intervalId = null;
      document.getElementById('status').className = 'alert alert-warning';
      document.getElementById('status').innerText = '⏸️ Sending stopped!';
    }
  }

  function sendTestMessage() {
    currentLatitude += stepLat;
    currentLongitude += stepLng;

    const testMessage = {
      trip_id: fixedTripId,
      bus_id: fixedBusId,
      latitude: currentLatitude.toFixed(6),
      longitude: currentLongitude.toFixed(6),
      type: "driver"
    };

    socket.emit('admins', 6, testMessage);
    console.log('🚀 Sent message:', testMessage);
    document.getElementById('lastMessage').innerText = JSON.stringify(testMessage, null, 2);

    console.log('🚀 Sent message:', testMessage);

    updateBusLocation(currentLatitude, currentLongitude);
  }

  function updateBusLocation(lat, lng) {
    const newPoint = [parseFloat(lat), parseFloat(lng)];
    pathCoordinates.push(newPoint);

    busMarker.setLatLng(newPoint);

    polyline.setLatLngs(pathCoordinates);

    map.panTo(newPoint);
  }
</script>

</body>
</html>
