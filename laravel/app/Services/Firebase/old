<?php
namespace App\Services\Firebase;

use App\Models\FcmToken;
use Illuminate\Support\Facades\Http;
use Google\Client as GoogleClient;
use Illuminate\Support\Facades\Storage;

class FcmService
{
    protected $client;
    protected $projectId;

    public function __construct()
    {
        $this->projectId = "busaty-app";
        $credentialsFilePath = Storage::path('json/bussat.json');
        $this->client = new GoogleClient();
        $this->client->setAuthConfig($credentialsFilePath);
        $this->client->addScope('https://www.googleapis.com/auth/firebase.messaging');
        $this->client->refreshTokenWithAssertion();
    }

    // الوظيفة الرئيسية لإرسال الإشعارات
    public function sendNotification(array $fcmTokens, $title = "Default Title", $body = "Default Body")
    {
        if (empty($fcmTokens)) {
            throw new \Exception('No FCM tokens provided.');
        }

        $accessToken = $this->getAccessToken();

        foreach ($fcmTokens as $fcmToken) {
            $message = $this->buildMessage($fcmToken, $title, $body);
            $response = $this->sendRequest($accessToken, $message);

            if ($response->failed()) {
                $this->handleErrorResponse($response, $fcmToken);
            }
        }

        return ['status' => 'Notifications sent successfully.'];
    }

    // وظيفة للحصول على الـ Access Token
    protected function getAccessToken()
    {
        $token = $this->client->getAccessToken();
        return $token['access_token'];
    }

    // وظيفة لإنشاء الرسالة
    protected function buildMessage($fcmToken, $title, $body)
    {
        return [
            "message" => [
                "token" => $fcmToken,
                "notification" => [
                    "title" => $title,
                    "body" => $body,
                ],
                "data" => [
                    "priority" => "high",
                    "urls" => ""
                ]
            ]
        ];
    }

    // وظيفة لإرسال الطلب باستخدام Http
    protected function sendRequest($accessToken, $message)
    {
        $headers = [
            "Authorization" => "Bearer $accessToken",
            'Content-Type' => 'application/json'
        ];

        return Http::withHeaders($headers)
            ->post("https://fcm.googleapis.com/v1/projects/{$this->projectId}/messages:send", $message);
    }

    // التعامل مع الاستجابة في حالة وجود خطأ
    protected function handleErrorResponse($response, $fcmToken)
    {
        $responseBody = $response->json();

        if (isset($responseBody['error']['details'][0]['errorCode'])) {
            $errorCode = $responseBody['error']['details'][0]['errorCode'];

            if ($errorCode === 'INVALID_ARGUMENT' || $errorCode === 'UNREGISTERED') {
                $this->removeInvalidToken($fcmToken);
                return; // تجاهل هذا التوكن واستمر
            }
        }

        // إذا حدث خطأ آخر غير التوكن غير صالح
        throw new \Exception('FCM Error: ' . $response->body());
    }

    // وظيفة لإزالة التوكنات غير الصالحة
    protected function removeInvalidToken($token)
    {
        // احذف التوكن غير الصالح من قاعدة البيانات أو التخزين الخاص بك
        // مثال:
        FcmToken::where('fcm_token', $token)->delete();
    }

}
