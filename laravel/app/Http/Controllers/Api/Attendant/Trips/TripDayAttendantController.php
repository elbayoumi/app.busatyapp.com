<?php

namespace App\Http\Controllers\Api\Attendant\Trips;

use App\Http\Controllers\Controller;
use App\Http\Requests\Attendant\Trips\JoinAttendantRequest;
use App\Http\Requests\Attendant\Trips\LeaveAttendantRequest;
use App\Models\TripDay;
use App\Models\TripDayAttendant;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Http\Request;

class TripDayAttendantController extends Controller
{
    /**
     * List attendants (active or all) for a given trip day.
     * Query params:
     *   - active=1 (only active), 0 (only inactive), omit for all
     *   - include=attendant,tripDay (comma-separated relations)
     */
    public function index(Request $request, TripDay $tripDay)
    {
        $query = TripDayAttendant::query()->forDay($tripDay->id);

        // filter by active flag if provided
        if ($request->filled('active')) {
            $query->where('active', (int) $request->boolean('active'));
        }

        // dynamic includes (e.g., ?include=attendant,tripDay)
        $includes = collect(explode(',', (string) $request->get('include')))
            ->filter()->values()->all();
        if (!empty($includes)) {
            $query->with($includes);
        } else {
            $query->with(['attendant']);
        }

        $data = $query->orderByDesc('id')->paginate($request->get('per_page', 20));

        return JSON($data);
    }

    /**
     * Join (attach) an attendant to a trip day.
     * - Idempotent: if there's already an active record, returns 200 with that record.
     * - Otherwise, creates a new join row (unique constraint enforces single active).
     */
    public function join(JoinAttendantRequest $request, TripDay $tripDay)
    {
        $attendantId = $request->attendant_id;
        $now = now();

        // If an active join already exists, return it (avoid duplicate active row)
        $existing = TripDayAttendant::query()
            ->forDay($tripDay->id)
            ->forAttendant($attendantId)
            ->active()
            ->first();

        if ($existing) {
            return JSON($existing->load('attendant'));
        }

        // Create a new join row
        $record = TripDayAttendant::create([
            'trip_day_id'  => $tripDay->id,
            'attendant_id' => $attendantId,
            'joined_at'    => $request->input('joined_at', $now),
            // 'active' generated by DB (1 if left_at is null)
        ]);

        return JSON($record->load('attendant'), 201);
    }

    /**
     * Leave (detach) an attendant from a trip day.
     * - Sets left_at. The DB-generated 'active' becomes 0 automatically.
     */
    public function leave(LeaveAttendantRequest $request, TripDay $tripDay)
    {
        $attendantId = $request->attendant_id;
        $leftAt = $request->input('left_at', now());

        $record = TripDayAttendant::query()
            ->forDay($tripDay->id)
            ->forAttendant($attendantId)
            ->active()
            ->first();

        if (!$record) {
            // Could be already left or never joined
            return JSONerror( 'Active join not found for this attendant on the given trip day.',
            404);
        }

        $record->left_at = $leftAt;
        $record->save();

        return JSON($record->fresh()->load('attendant'));
    }

    /**
     * Show a single link (useful for debugging/clients).
     */
    public function show(TripDay $tripDay, TripDayAttendant $tripDayAttendant)
    {
        if ($tripDayAttendant->trip_day_id !== $tripDay->id) {
            return JSONerror('Not found.', 404);
        }

        return JSON($tripDayAttendant->load(['attendant', 'tripDay']));
    }

    /**
     * Hard-delete a link (rarely needed; prefer "leave").
     */
    public function destroy(TripDay $tripDay, TripDayAttendant $tripDayAttendant)
    {
        if ($tripDayAttendant->trip_day_id !== $tripDay->id) {
            return JSONerror(__('Not found.'), 404);
        }

        $tripDayAttendant->delete();

        return JSON('Deleted.');
    }
}
